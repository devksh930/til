{"version":3,"file":"static/webpack/static/development/pages/index.js.bc3eb80c27d2b51ff338.hot-update.js","sources":["webpack:///./components/insertionSort.tsx"],"sourcesContent":["import {range, shuffle} from 'lodash';\nimport {useState, FC, SetStateAction, Dispatch} from 'react';\nimport {Transform} from 'stream';\n\nconst SIZE = 30;\nconst getArr = () => shuffle(range(1, SIZE + 1))\n\nconst swap = (arr, a, b) => {\n    const tmp = arr[a]\n    arr[a] = arr[b]\n    arr[b] = tmp\n}\n\ntype TSetArr = Dispatch<SetStateAction<number[]>>\ntype TSetIdx = Dispatch<SetStateAction<number>>\n\nconst delaySetArr = (arr: number[], setArr: TSetArr) => {\n\n    return new Promise((resolve) => {\n        setArr(arr)\n        setTimeout(() => resolve(), 50)\n    })\n}\nconst sort = async (arr: number[], setArr: TSetArr, setidxI: TSetIdx, setidxJ: TSetIdx) => {\n    {\n        /*  https://en.wikipedia.org/wiki/Insertion_sort\n         i ← 1\n      while i < length(A)\n          j ← i\n          while j > 0 and A[j-1] > A[j]\n              swap A[j] and A[j-1]\n              j ← j - 1\n          end while\n          i ← i + 1\n      end while\n        */\n    }\n    let i = 1;\n    while (i < arr.length) {\n        setidxJ(i)\n        let j = i;\n        while (j > 0 && arr[j - 1] > arr[j]) {\n\n            swap(arr, j, j - 1)\n            await delaySetArr(arr, setArr)\n            j = j - 1;\n            setidxJ(j - 1)\n        }\n        i = i + 1;\n        setidxI(i)\n    }\n}\n\n//callback hell -> promis -> async/await es7\ninterface IPropsBar {\n    value: number\n    idx: number\n}\n\nconst Bar: FC<IPropsBar> = (props) => {\n    const {value, idx} = props\n    const style = {height: value * 10, transform: `translateX(${idx * 22}px)`}\n    return (\n        <>\n            <div style={style} className='bar'/>\n\n            <style jsx>{`\n    .bar{\n        position: absolute;\n        width: 20px;\n        background-color: black;\n                }\n\n                `}</style>\n        </>\n    )\n}\n\nexport default () => {\n\n    const [arr, setArr] = useState(getArr())\n    const [idxI, setidxI] = useState(1)\n    const [idxJ, setidxJ] = useState(1)\n    const [isRunning, setIsRunning] = useState(false)\n\n    const handleShuffle = () => {\n        setArr(getArr())\n    }\n    const handleSort = () => {\n        // console.log(\"before sort\\n\"+arr);\n        const sortedArr = [...arr]\n        sort(sortedArr, setArr, setidxI, setidxJ)\n        setArr(sortedArr)\n        // console.log(\"after sort\\n\"+arr);\n        setIsRunning(true)\n    }\n\n    return (\n        <div>\n            <div className='board'>\n\n                {arr.map((value, i) => <Bar key={i} value={value} idx={i}/>)}\n\n\n            </div>\n            <div className='index i' style={{transform: `translateX(${idxI * 22}px)`}}>i</div>\n            <div className='index j' style={{transform: `translateX(${idxJ * 22}px)`}}>j</div>\n\n\n            <div className='buttonBox'>\n                {!isRunning && <button onClick={handleShuffle}>shuffle</button>\n                }\n                {!isRunning && <button onClick={handleSort}>sort</button>}\n            </div>\n            <style jsx>{`\n            .board{\n                width: 100%;\n                height: 200px;\n                background-color: green;\n                color: white;\n                transform: rotateX(180deg);\n                }\n            .buttonBox{ \n               width: 100%;\n               height: 60px;\n               background-color: gray;        \n               text-align:right;\n            }\n            button{ \n                font-size: 40px;\n            }\n            .index{\n            position: absolute;\n            width: 20px;\n            background-color: blue;\n            opacity: 0.8;\n            }\n            .index.j{\n            background-color: blue;\n            color: white;\n\n            }\n            .index.i{\n            background-color: yellow;\n            color: black;\n\n            }\n          \n        `}</style>\n        </div>\n    )\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAGA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcA;AACA;AAfA;AAAA;AAAA;AAAA;AAAA;AACA;AAeA;AACA;AACA;AAlBA;AAAA;AAAA;AAAA;AAAA;AACA;AAmBA;AApBA;AAAA;AACA;AADA;AAsBA;AACA;AAvBA;AAAA;AACA;AADA;AAyBA;AACA;AA1BA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAkCA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAadA;AAAA;AAAA;AAqDA;;;;A","sourceRoot":""}